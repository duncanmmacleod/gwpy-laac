#!/usr/bin/env python
# -*- coding: utf-8 -*-
# Copyright (C) Duncan Macleod (2013)

"""How to plot a high-resolution Spectrogram

In this example, we show how to plot a high-resolution, short-duration
`~gwpy.spectrogram.Spectrogram`, similar to those generated by LDVW.

"""

__author__ = "Duncan Macleod <duncan.macleod@ligo.org>"
__currentmodule__ = 'gwpy.timeseries'

# First we identify the time we want to study:
gps = 1109138543.8

# First, import the `~gwpy.timeseries.TimeSeries` class, and
# :meth:`~gwpy.timeseries.TimeSeries.fetch` the data:
from gwpy.timeseries import TimeSeries
oaf = TimeSeries.fetch(
    'L1:OAF-CAL_DARM_DQ', int(gps)-5, int(gps) + 5)

# Now we can call the `~gwpy.timeseries.TimeSeries.spectrogram2` method of
# `oaf` to calculate our high-resolution `~gwpy.spectrogram.Spectrogram`
specgram = oaf.spectrogram2(fftlength=0.1, overlap=0.095) ** (1/2.)

# To whiten the `specgram` we can use the
# :meth:`~gwpy.spectrogram.Spectrogram.ratio` method to divide by the
# overall median:
medratio = specgram.ratio('median')

# Finally, we make a plot:
plot = medratio.plot(norm='log', vmin=0.5, vmax=10)
plot.set_epoch(gps)
plot.set_xlim(gps-2, gps+2)
plot.set_yscale('log')
plot.set_ylim(80, 8192)
plot.add_colorbar(label='Amplitude relative to median')
plot.set_title('L1 `whistle\' glitch')
plot.show()
